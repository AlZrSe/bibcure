#!/usr/bin/python2
import bibtexparser
import argparse
from itertools import groupby
import operator
from bibtexparser.bwriter import BibTexWriter
from bibtexparser.bibdatabase import BibDatabase
from multiprocessing import Pool
import sys
from journalabbrev.get_status import get_status
from journalabbrev.in_db import update_bibs_in
from journalabbrev.out_db import update_bibs_out
from journalabbrev.database import Db_abbrev


db_abbrev = Db_abbrev()


def save_output_bib(updated_bibs, output_file):
    writer = BibTexWriter()
    new_bibtex = BibDatabase()
    new_bibtex.entries = updated_bibs
    with open(output_file, 'w') as bibfile:
        bibfile.write(writer.write(new_bibtex).encode("utf8"))


def main():
    parser = argparse.ArgumentParser(
        prog="journalabbreviation",
        description='''Abreviate the journals name inside a bibtex file.

        ''')
    parser.add_argument(
        "--input", "-i",
        required=True,
        type=argparse.FileType("r"),
        help="bibtex input file"
    )
    parser.add_argument(
        "--output", "-o",
        required=True,
        help="bibtex output file")

    args = parser.parse_args()
    bibtex = bibtexparser.loads(args.input.read())
    if len(bibtex.entries) == 0:
        print "Input File is empty or corrupted."
        sys.exit(1)
    bibs_journal, bibs_not_journal = [], []
    for bib in bibtex.entries:
        (bibs_journal
         if "journal" in bib else bibs_not_journal).append(bib)
    bibs_published, bibs_arxiv = [], []
    for bib in bibs_journal:
        (bibs_arxiv
         if "arxiv" in bib["journal"].lower()
         else bibs_published).append(bib)
    pool = Pool()
    bibs_status = pool.map(get_status, bibs_published)
    pool.close()
    pool.join()
    bibs_status.sort(key=operator.itemgetter('_type'))
    grouped_bibs = []
    for key, items in groupby(bibs_status, lambda i: i["_type"]):
        grouped_bibs.append(list(items))
    bibs_in_db, bibs_abreviated, bibs_out_db = [], [], []
    for bib in grouped_bibs:
        if bib[0]["_type"] == "out_db":
            bibs_out_db.append(bib)
        elif bib[0]["_type"] == "abreviated":
            bibs_abreviated.append(bib)
        else:
            bibs_in_db.append(bib)

    if len(bibs_arxiv) > 0:
        print "%d bibs are arxiv" % len(bibs_arxiv)
        updated_bibs = bibs_arxiv

    if len(bibs_not_journal) > 0:
        print "%d bibs don't have journal tag " % len(bibs_not_journal)

        updated_bibs += bibs_not_journal

    if len(bibs_abreviated) > 0:
        print "%d bibs are already abbreviated  " % len(bibs_abreviated[0])
        updated_bibs += bibs_abreviated[0]

    if len(bibs_in_db) > 0:
        print "%d bibs can be easily abbreviated " % len(bibs_in_db[0])
        updated_bibs = reduce(
            lambda a, b: a + b,  map(update_bibs_in, bibs_in_db)
        )

    if len(bibs_out_db) > 0:
        print "%d bibs must be manualy abbreviated, " % len(bibs_out_db[0]) + \
            "at least this time "
        updated_bibs += reduce(
            lambda a, b: a + b, map(update_bibs_out, bibs_out_db)
        )

    for bib in updated_bibs:
        if set(("_text", "_type")).issubset(bib) in bib:
            bib.pop("_text", None)
            bib.pop("_type", None)

    save_output_bib(updated_bibs, args.output)
    db_abbrev.close()


if __name__ == "__main__":
    main()
